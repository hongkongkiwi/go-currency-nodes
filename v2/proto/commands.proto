syntax = "proto3";
package protobuf;

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
// import "currency_helpers.proto";

option go_package = "./";

service NodeCmdStream {
  // Node initiates command stream to controller
  rpc NodeCommandStream (stream StreamFromNode) returns (stream StreamToNode) {}
}


service CliCmdStream {
  // Cli initiates command stream to controller
  rpc CliCommandStream (stream StreamFromCli) returns (stream StreamToCli) {}
}

// Send a single command to controller to foreward to one or more UUIDs
message StreamFromCli {
  string cli_uuid = 1; // CLI client uuid to return back to
  repeated string node_uuids = 2; // List of node UUIDs to send to
  google.protobuf.Any command = 3; // Command to send to node
}

// Controller sends this back to the Cli
message StreamToCli {
  optional string node_uuid = 2; // Our node uuid
  google.protobuf.Any response = 3;
}

// What the node sends to controller
message StreamFromNode {
  string node_uuid = 1; // Our node uuid
  optional string from_uuid = 2; // Cli client uuid
  google.protobuf.Any response = 3;
}

// What the controller sends to node
message StreamToNode {
  optional string from_uuid = 1; // Pass this so the command gets sent back to right cli client
  google.protobuf.Any command = 2;
}

// Sent when an unknown command is sent
message UnknownCommandV1Notify {
  google.protobuf.Any command = 1;
}

message CurrencyStreamStateV1 {
  enum StreamState {
    StreamUnknown = 0;
    StreamStart = 1;
    StreamStop = 2;
  }
  string currency_pair = 1;
  StreamState stream_state = 2;
  // These are used to communicate the latest prices (if any) from server to node
  optional double latest_price = 3;
  optional google.protobuf.Timestamp latest_price_updated_at = 4;
}

message NodeKnownCurrenciesV1Notify {
  repeated string known_currency_pairs = 1;
}

message NodePriceUpdateV1Notify {
  string currency_pair = 1;
  double price = 2;
  google.protobuf.Timestamp price_updated_at = 3;
}

message NodeStreamModifyStateV1Req {
  repeated CurrencyStreamStateV1 stream_states = 1;
}

message NodeStreamModifyStateV1Reply {
}

message NodeStatusV1Req {
}

message NodeStatusV1Reply {
  string app_version = 1; // app version of this node
  string connected_controller_server = 2; // Where to initiate the stream connection
  google.protobuf.Timestamp connected_at = 3;
  repeated CurrencyStreamStateV1 stream_states = 4;
  message NodeConfig {
    string uuid = 1;
    string name = 2; // friendly name of this node
    bool verbose_log = 3;
    // List of servers the node will randomly connect to upon boot
    repeated string controller_servers = 4;
  }
  NodeConfig config = 5;
}

message NodeShutdownV1Req {
}

message NodeShutdownV1Reply {
  google.protobuf.Timestamp shutdown_at = 1;
}

message ControllerListNodesV1Req {
}

message ControllerListNodesV1Reply {
  repeated string node_uuids = 1;
}

message ControllerKickNodesV1Req {
  repeated string node_uuids = 1;
}

message ControllerKickNodesV1Reply {
  repeated string kicked_node_uuids = 1;
}

message ControllerAppVersionV1Req {
}

message ControllerAppVersionV1Reply {
  string controller_app_version = 1;
}