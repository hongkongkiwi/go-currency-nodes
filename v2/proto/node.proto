syntax = "proto3";
package protobuf;

// import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
// import "currency_helpers.proto";

option go_package = "./";

// Node initiates one stream of responses
service NodeCmdStream {
  // Node sends responses to controller in resonse to commands sent
  rpc NodeCommandStream (stream StreamFromNode) returns (stream StreamToNode) {}
}

service CliCmdStream {
  // Cli sends messages to controller which are passed on to one or more nodes
  rpc CliCommandStream (stream StreamFromCli) returns (stream StreamToCli) {}
}

// Send a single command to controller to foreward to one or more UUIDs
message StreamFromCli {
  string cli_uuid = 1; // CLI client uuid
  repeated string node_uuids = 2; // List of node UUIDs to send to
  optional google.protobuf.Any node_command = 3; // Command to send to node
}

// What the controller sends a response to cli client
message StreamToCli {
  optional string node_uuid = 1; // Our node uuid
  google.protobuf.Any response = 2;
}

// What the node sends to controller
message StreamFromNode {
  string node_uuid = 1; // Our node uuid
  optional string from_uuid = 2; // Cli client uuid
  optional google.protobuf.Any response = 3;
}

// What the controller sends to node
message StreamToNode {
  string from_uuid = 1; // Pass this so the command gets sent back to right cli client
  google.protobuf.Any command = 2;
}

message CommandPlugin {
  string plugin_name = 1;
  string plugin_version = 2;
}

message NodeSetupSetupReq {
}

message NodeSetupSetupReply {
  string uuid = 1;
  repeated CommandPlugin supported_plugins = 2; // Server responds with plugins supported
}

message NodeStatusReq {
}

message NodeStatusReply {
  string node_uuid = 2; // uuid of this node
  string node_name = 3; // friendly name of this node
  string node_version = 4; // app version of this node
  string controller_server = 5; // Where to initiate the stream connection
}

message NodeAppVersionReq {
}

// rpc NodeVersion
message NodeAppVersionReply {
  string node_version = 1;
}

message NodeUUIDReq {
}

// rpc NodeUUID
message NodeUUIDReply {
  string node_uuid = 2;
  string node_name = 3;
}

message ControllerListNodesReq {
}

message ControllerListNodesReply {
  repeated string node_uuids = 1;
}

message ControllerKickNodesReq {
  repeated string node_uuids = 1;
}

message ControllerKickNodesReply {
}