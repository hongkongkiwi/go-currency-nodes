syntax = "proto3";
package protobuf;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "currency_helpers.proto";

option go_package = "./";

message NodeStatusReply {
  string node_uuid = 1; // uuid of this node
  string node_name = 2; // friendly name of this node
  string node_version = 3; // app version of this node
  bool node_updates_paused = 4;
  string controller_server = 5;
  string listen_address = 6;
  string advertise_address = 7;
  repeated CurrencyItem currency_items = 8;
}

service NodeCommands {
  // Get this nodes UUID and name
  rpc NodeAppVersion (google.protobuf.Empty) returns (NodeAppVersionReply) {}
  // Get this nodes UUID and name
  rpc NodeUUID (google.protobuf.Empty) returns (NodeUUIDReply) {}
  // Send a manual price update to this node
  rpc NodeManualPriceUpdate (NodeManualPriceUpdateReq) returns (google.protobuf.Empty) {}
  // Get this nodes full status
  rpc NodeStatus (google.protobuf.Empty) returns (NodeStatusReply) {}
  // Pause updates of currencies to controller
  rpc NodeCurrenciesPriceEventsPause (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Resume updates of currencies to controller
  rpc NodeCurrenciesPriceEventsResume (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Get details of all currencies this Node knows about
  rpc NodeCurrencies (google.protobuf.Empty) returns (NodeCurrenciesReply) {}
  // Ask our node to request the latest prices from controller
  rpc NodeCurrenciesRefreshPrices (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Kill the app
  rpc NodeAppKill (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// rpc NodeVersion
message NodeAppVersionReply {
  string node_version = 1;
}

// rpc NodeUUID
message NodeUUIDReply {
  string node_uuid = 1;
  string node_name = 2;
}

// rpc NodeManualPriceUpdate 
message NodeManualPriceUpdateReq {
  string currency_pair = 1;
  double price = 2;
}

// rpc NodeCurrencies
message NodeCurrenciesReply {
  repeated CurrencyItem currency_items = 1;
}

service NodeEvents {
  // Controller calls this on node when a new price comes in
  rpc CurrencyPriceUpdatedEvent (CurrencyPriceUpdateEventReq) returns (google.protobuf.Empty) {}
}

// rpc CurrencyPriceUpdatedEvent
message CurrencyPriceUpdateEventReq {
  repeated CurrencyItem currency_items = 1;
}